{"version":3,"file":"firewallNat-X5u2YUSR.js","sources":["../../src/views/firewallNat.vue"],"sourcesContent":["<template>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"mb-4\">\n          <h2 class=\"mb-0\">\n            <i class=\"bi bi-arrow-left-right me-2\"></i>\n            Firewall NAT\n          </h2>\n        </div>\n\n        <!-- NAT Rules Table -->\n        <div class=\"card\">\n          <div class=\"card-header\">\n            <h5 class=\"mb-0\">\n              <i class=\"bi bi-list-ul me-2\"></i>\n              Current NAT Rules\n            </h5>\n          </div>\n          <div class=\"card-body\">\n            <div v-if=\"loading\" class=\"text-center py-4\">\n              <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n            \n            <div v-else-if=\"natRules.length === 0\" class=\"text-center py-4 text-muted\">\n              <i class=\"bi bi-arrow-left-right fs-1\"></i>\n              <p class=\"mt-2\">No NAT rules found</p>\n            </div>\n            \n            <div v-else class=\"table-responsive\">\n              <table class=\"table table-striped table-hover\">\n                <thead class=\"table-dark\">\n                  <tr>\n                    <th width=\"40\"><i class=\"bi bi-grip-vertical text-muted\"></i></th>\n                    <th>ID</th>\n                    <th>Chain</th>\n                    <th>Source</th>\n                    <th>Destination</th>\n                    <th>Protocol</th>\n                    <th>Port</th>\n                    <th>Target</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr \n                    v-for=\"(rule, index) in natRules\" \n                    :key=\"rule.id\"\n                    :draggable=\"true\"\n                    @dragstart=\"handleDragStart(index, $event)\"\n                    @dragover=\"handleDragOver($event)\"\n                    @drop=\"handleDrop(index, $event)\"\n                    @dragend=\"handleDragEnd\"\n                    :class=\"{ 'drag-over': draggedIndex === index && dragOverIndex === index }\"\n                    class=\"draggable-row\"\n                  >\n                    <td class=\"drag-handle\">\n                      <i class=\"bi bi-grip-vertical text-muted cursor-grab\"></i>\n                    </td>\n                    <td>\n                      <span class=\"badge bg-primary\">{{ index + 1 }}</span>\n                    </td>\n                    <td>\n                      <span class=\"badge bg-secondary\">{{ rule.chain }}</span>\n                    </td>\n                    <td>\n                      <code>{{ rule.source || 'Any' }}</code>\n                    </td>\n                    <td>\n                      <code>{{ rule.destination || 'Any' }}</code>\n                    </td>\n                    <td>\n                      <span v-if=\"rule.protocol && rule.protocol !== 'any'\" class=\"badge bg-info\">\n                        {{ rule.protocol }}\n                      </span>\n                      <span v-else class=\"text-muted\">Any</span>\n                    </td>\n                    <td>\n                      <code>{{ rule.port || 'Any' }}</code>\n                    </td>\n                    <td>\n                      <span v-if=\"rule.target === 'ACCEPT'\" class=\"badge bg-success\">\n                        {{ rule.target }}\n                      </span>\n                      <span v-else-if=\"rule.target === 'DROP'\" class=\"badge bg-danger\">\n                        {{ rule.target }}\n                      </span>\n                      <span v-else-if=\"rule.target === 'MASQUERADE'\" class=\"badge bg-warning\">\n                        {{ rule.target }}\n                      </span>\n                      <span v-else-if=\"rule.target === 'SNAT'\" class=\"badge bg-primary\">\n                        {{ rule.target }}\n                      </span>\n                      <span v-else-if=\"rule.target === 'DNAT'\" class=\"badge bg-info\">\n                        {{ rule.target }}\n                      </span>\n                      <span v-else class=\"badge bg-secondary\">\n                        {{ rule.target }}\n                      </span>\n                    </td>\n                    <td>\n                      <button \n                        class=\"btn btn-outline-danger btn-sm\"\n                        @click=\"deleteNatRule(rule.id)\"\n                        :disabled=\"loading\"\n                        title=\"Delete Rule\"\n                      >\n                        <i class=\"bi bi-trash\"></i>\n                      </button>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n          \n          <!-- Card Footer with Actions -->\n          <div class=\"card-footer bg-light border-top\">\n            <div class=\"d-flex justify-content-between align-items-center\">\n              <div class=\"d-flex align-items-center\">\n                <i class=\"bi bi-info-circle me-2 text-muted\"></i>\n                <span class=\"text-muted\">\n                  Total NAT Rules: {{ natRules.length }}\n                  <span v-if=\"hasUnsavedChanges\" class=\"text-warning ms-2\">\n                    <i class=\"bi bi-exclamation-triangle\"></i> Unsaved changes\n                  </span>\n                </span>\n              </div>\n              <div class=\"d-flex gap-2\">\n                <button \n                  class=\"btn btn-primary\"\n                  @click=\"openAddNatRuleModal\"\n                  :disabled=\"loading\"\n                >\n                  <i class=\"bi bi-plus-circle me-1\"></i>\n                  Add NAT Rule\n                </button>\n                <button \n                  v-if=\"hasUnsavedChanges\"\n                  class=\"btn btn-success\"\n                  @click=\"saveNatRuleOrder\"\n                  :disabled=\"savingOrder || loading\"\n                >\n                  <span v-if=\"savingOrder\" class=\"spinner-border spinner-border-sm me-1\" role=\"status\"></span>\n                  <i v-else class=\"bi bi-check-lg me-1\"></i>\n                  Save Changes\n                </button>\n                <button \n                  class=\"btn btn-outline-secondary\"\n                  @click=\"reloadNatRules\"\n                  :disabled=\"loading\"\n                >\n                  <i class=\"bi bi-arrow-clockwise me-1\"></i>\n                  Reload NAT Rules\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Add NAT Rule Modal -->\n    <div class=\"modal fade\" id=\"addNatRuleModal\" tabindex=\"-1\" aria-hidden=\"true\">\n      <div class=\"modal-dialog modal-lg\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">\n              <i class=\"bi bi-plus-circle me-2\"></i>\n              Add NAT Rule\n            </h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeAddNatRuleModal\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <form @submit.prevent=\"addNatRule\">\n              <div class=\"row\">\n                <!-- Chain Selection -->\n                <div class=\"col-md-6 mb-3\">\n                  <label class=\"form-label\">Chain <span class=\"text-danger\">*</span></label>\n                  <select \n                    class=\"form-select\" \n                    v-model=\"newNatRule.chain\" \n                    required\n                    @change=\"onTargetChange\"\n                  >\n                    <option value=\"\">Select Chain</option>\n                    <option value=\"PREROUTING\">PREROUTING</option>\n                    <option value=\"POSTROUTING\">POSTROUTING</option>\n                    <option value=\"OUTPUT\">OUTPUT</option>\n                  </select>\n                  <div class=\"form-text\">NAT chain for the rule</div>\n                </div>\n\n                <!-- Target Selection -->\n                <div class=\"col-md-6 mb-3\">\n                  <label class=\"form-label\">Target <span class=\"text-danger\">*</span></label>\n                  <select \n                    class=\"form-select\" \n                    v-model=\"newNatRule.target\" \n                    required\n                    @change=\"onTargetChange\"\n                  >\n                    <option value=\"\">Select Target</option>\n                    <option value=\"DNAT\">DNAT (Destination NAT)</option>\n                    <option value=\"SNAT\">SNAT (Source NAT)</option>\n                    <option value=\"MASQUERADE\">MASQUERADE</option>\n                    <option value=\"REDIRECT\">REDIRECT</option>\n                  </select>\n                  <div class=\"form-text\">NAT target type</div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <!-- Source IP -->\n                <div class=\"col-md-6 mb-3\">\n                  <label class=\"form-label\">Source IP</label>\n                  <input \n                    type=\"text\" \n                    class=\"form-control\" \n                    v-model=\"newNatRule.source\"\n                    placeholder=\"192.168.1.0/24 (optional)\"\n                  >\n                  <div class=\"form-text\">Source IP address or subnet (optional)</div>\n                </div>\n\n                <!-- Destination IP -->\n                <div class=\"col-md-6 mb-3\">\n                  <label class=\"form-label\">Destination IP</label>\n                  <input \n                    type=\"text\" \n                    class=\"form-control\" \n                    v-model=\"newNatRule.destination\"\n                    placeholder=\"0.0.0.0/0 (optional)\"\n                  >\n                  <div class=\"form-text\">Destination IP address or subnet (optional)</div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <!-- Protocol -->\n                <div class=\"col-md-6 mb-3\">\n                  <label class=\"form-label\">Protocol</label>\n                  <select class=\"form-select\" v-model=\"newNatRule.protocol\">\n                    <option value=\"any\">Any</option>\n                    <option value=\"tcp\">TCP</option>\n                    <option value=\"udp\">UDP</option>\n                    <option value=\"icmp\">ICMP</option>\n                  </select>\n                  <div class=\"form-text\">Protocol for the rule</div>\n                </div>\n\n                <!-- Port -->\n                <div class=\"col-md-6 mb-3\">\n                  <label class=\"form-label\">Port</label>\n                  <input \n                    type=\"text\" \n                    class=\"form-control\" \n                    v-model=\"newNatRule.port\"\n                    placeholder=\"80 (optional)\"\n                  >\n                  <div class=\"form-text\">Port number (optional)</div>\n                </div>\n              </div>\n\n              <!-- Dynamic Fields Based on Target -->\n              <div v-if=\"newNatRule.target === 'DNAT'\" class=\"row\">\n                <div class=\"col-md-6 mb-3\">\n                  <label class=\"form-label\">Translated IP <span class=\"text-danger\">*</span></label>\n                  <input \n                    type=\"text\" \n                    class=\"form-control\" \n                    v-model=\"newNatRule.translatedIp\"\n                    placeholder=\"192.168.1.100\"\n                    required\n                  >\n                  <div class=\"form-text\">Destination IP for DNAT</div>\n                </div>\n                <div class=\"col-md-6 mb-3\">\n                  <label class=\"form-label\">Translated Port</label>\n                  <input \n                    type=\"text\" \n                    class=\"form-control\" \n                    v-model=\"newNatRule.translatedPort\"\n                    placeholder=\"80\"\n                  >\n                  <div class=\"form-text\">Destination port for DNAT (optional)</div>\n                </div>\n              </div>\n\n              <div v-if=\"newNatRule.target === 'SNAT'\" class=\"row\">\n                <div class=\"col-md-12 mb-3\">\n                  <label class=\"form-label\">Translated IP <span class=\"text-danger\">*</span></label>\n                  <input \n                    type=\"text\" \n                    class=\"form-control\" \n                    v-model=\"newNatRule.translatedIp\"\n                    placeholder=\"203.0.113.5\"\n                    required\n                  >\n                  <div class=\"form-text\">Source IP for SNAT</div>\n                </div>\n              </div>\n\n              <div v-if=\"newNatRule.target === 'REDIRECT'\" class=\"row\">\n                <div class=\"col-md-12 mb-3\">\n                  <label class=\"form-label\">Translated Port <span class=\"text-danger\">*</span></label>\n                  <input \n                    type=\"text\" \n                    class=\"form-control\" \n                    v-model=\"newNatRule.translatedPort\"\n                    placeholder=\"80\"\n                    required\n                  >\n                  <div class=\"form-text\">Destination port for REDIRECT</div>\n                </div>\n              </div>\n\n              <!-- MASQUERADE doesn't need additional fields -->\n\n              <!-- Command Preview -->\n              <div class=\"mt-4\">\n                <label class=\"form-label\">Command Preview:</label>\n                <div class=\"bg-dark text-light p-3 rounded\">\n                  <code>{{ generateIptablesCommand }}</code>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeAddNatRuleModal\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"addNatRule\" :disabled=\"loading || !isFormValid\">\n              <span v-if=\"loading\" class=\"spinner-border spinner-border-sm me-1\" role=\"status\"></span>\n              Add NAT Rule\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue'\n\n// Reactive data\nconst natRules = ref([])\nconst originalNatRules = ref([])\nconst loading = ref(false)\nconst savingOrder = ref(false)\nconst hasUnsavedChanges = ref(false)\nconst draggedIndex = ref(-1)\nconst dragOverIndex = ref(-1)\n\n// New NAT rule form\nconst newNatRule = ref({\n  chain: '',\n  target: '',\n  source: '',\n  destination: '',\n  protocol: 'any',\n  port: '',\n  translatedIp: '',\n  translatedPort: ''\n})\n\n// Computed properties\nconst isFormValid = computed(() => {\n  const rule = newNatRule.value\n  if (!rule.chain || !rule.target) return false\n  \n  // Check target-specific requirements\n  if (rule.target === 'DNAT' && !rule.translatedIp) return false\n  if (rule.target === 'SNAT' && !rule.translatedIp) return false\n  if (rule.target === 'REDIRECT' && !rule.translatedPort) return false\n  \n  return true\n})\n\nconst generateIptablesCommand = computed(() => {\n  const rule = newNatRule.value\n  if (!rule.chain || !rule.target) return 'Select chain and target to see command'\n  \n  let cmd = `iptables -t nat -A ${rule.chain}`\n  \n  if (rule.source) cmd += ` -s ${rule.source}`\n  if (rule.destination) cmd += ` -d ${rule.destination}`\n  if (rule.protocol !== 'any') cmd += ` -p ${rule.protocol}`\n  if (rule.port) cmd += ` --dport ${rule.port}`\n  \n  cmd += ` -j ${rule.target}`\n  \n  if (rule.target === 'DNAT') {\n    cmd += ` --to-destination ${rule.translatedIp}`\n    if (rule.translatedPort) cmd += `:${rule.translatedPort}`\n  } else if (rule.target === 'SNAT') {\n    cmd += ` --to-source ${rule.translatedIp}`\n  } else if (rule.target === 'REDIRECT') {\n    cmd += ` --to-ports ${rule.translatedPort}`\n  }\n  \n  return cmd\n})\n\n// Methods\nconst loadNatRules = async () => {\n  loading.value = true\n  try {\n    const response = await fetch('/api/firewall/nat')\n    const data = await response.json()\n    if (data.status) {\n      natRules.value = data.data || []\n      originalNatRules.value = JSON.parse(JSON.stringify(natRules.value))\n      hasUnsavedChanges.value = false\n    } else {\n      console.error('Failed to load NAT rules:', data.message)\n    }\n  } catch (error) {\n    console.error('Error loading NAT rules:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\nconst addNatRule = async () => {\n  if (!isFormValid.value) {\n    showToast('error', 'Please fill in all required fields')\n    return\n  }\n  \n  loading.value = true\n  try {\n    const response = await fetch('/api/firewall/nat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newNatRule.value)\n    })\n    \n    const data = await response.json()\n    \n    if (data.status) {\n      closeAddNatRuleModal()\n      resetNewNatRuleForm()\n      await loadNatRules()\n      showToast('success', 'NAT rule added successfully')\n    } else {\n      showToast('error', data.message || 'Failed to add NAT rule')\n    }\n  } catch (error) {\n    console.error('Error adding NAT rule:', error)\n    showToast('error', 'Error adding NAT rule: ' + error.message)\n  } finally {\n    loading.value = false\n  }\n}\n\nconst deleteNatRule = async (ruleId) => {\n  if (!confirm('Are you sure you want to delete this NAT rule?')) return\n  \n  loading.value = true\n  try {\n    const response = await fetch(`/api/firewall/nat/${ruleId}`, {\n      method: 'DELETE'\n    })\n    \n    const data = await response.json()\n    \n    if (data.status) {\n      await loadNatRules()\n      showToast('success', 'NAT rule deleted successfully')\n    } else {\n      showToast('error', data.message || 'Failed to delete NAT rule')\n    }\n  } catch (error) {\n    console.error('Error deleting NAT rule:', error)\n    showToast('error', 'Error deleting NAT rule: ' + error.message)\n  } finally {\n    loading.value = false\n  }\n}\n\nconst reloadNatRules = async () => {\n  await loadNatRules()\n  showToast('info', 'NAT rules reloaded')\n}\n\nconst onTargetChange = () => {\n  // Reset dynamic fields when target changes\n  newNatRule.value.translatedIp = ''\n  newNatRule.value.translatedPort = ''\n}\n\nconst resetNewNatRuleForm = () => {\n  newNatRule.value = {\n    chain: '',\n    target: '',\n    source: '',\n    destination: '',\n    protocol: 'any',\n    port: '',\n    translatedIp: '',\n    translatedPort: ''\n  }\n}\n\nconst openAddNatRuleModal = () => {\n  resetNewNatRuleForm()\n  const modal = new bootstrap.Modal(document.getElementById('addNatRuleModal'))\n  modal.show()\n}\n\nconst closeAddNatRuleModal = () => {\n  const modal = bootstrap.Modal.getInstance(document.getElementById('addNatRuleModal'))\n  if (modal) {\n    modal.hide()\n  }\n}\n\n// Drag & Drop methods\nconst handleDragStart = (index, event) => {\n  draggedIndex.value = index\n  event.dataTransfer.effectAllowed = 'move'\n  event.target.style.opacity = '0.5'\n}\n\nconst handleDragOver = (event) => {\n  event.preventDefault()\n  event.dataTransfer.dropEffect = 'move'\n}\n\nconst handleDrop = (event, dropIndex) => {\n  event.preventDefault()\n  dragOverIndex.value = dropIndex\n  \n  if (draggedIndex.value !== dropIndex) {\n    // Reorder the array\n    const draggedRule = natRules.value[draggedIndex.value]\n    natRules.value.splice(draggedIndex.value, 1)\n    natRules.value.splice(dropIndex, 0, draggedRule)\n    \n    // Mark as having unsaved changes\n    hasUnsavedChanges.value = true\n  }\n}\n\nconst handleDragEnd = (event) => {\n  event.target.style.opacity = ''\n  draggedIndex.value = -1\n  dragOverIndex.value = -1\n}\n\nconst saveNatRuleOrder = async () => {\n  try {\n    savingOrder.value = true\n    \n    const rulesData = natRules.value.map((rule, index) => ({\n      id: rule.id,\n      position: index + 1\n    }))\n    \n    const response = await fetch('/api/firewall/nat/reorder', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ rules: rulesData })\n    }).then(res => res.json())\n    \n    if (response.status) {\n      showToast('success', 'NAT rules reordered successfully')\n      originalNatRules.value = JSON.parse(JSON.stringify(natRules.value))\n      hasUnsavedChanges.value = false\n    } else {\n      showToast('error', response.message || 'Failed to save NAT rule order')\n      // Revert to original order\n      natRules.value = JSON.parse(JSON.stringify(originalNatRules.value))\n    }\n  } catch (error) {\n    showToast('error', 'Error saving NAT rule order: ' + error.message)\n    // Revert to original order\n    natRules.value = JSON.parse(JSON.stringify(originalNatRules.value))\n  } finally {\n    savingOrder.value = false\n  }\n}\n\nconst showToast = (type, message) => {\n  // Simple toast implementation - you can replace with your toast system\n  const toast = document.createElement('div')\n  toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`\n  toast.style.top = '20px'\n  toast.style.right = '20px'\n  toast.style.zIndex = '9999'\n  toast.innerHTML = `\n    ${message}\n    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n  `\n  document.body.appendChild(toast)\n  \n  setTimeout(() => {\n    if (toast.parentNode) {\n      toast.parentNode.removeChild(toast)\n    }\n  }, 5000)\n}\n\n// Lifecycle\nonMounted(() => {\n  loadNatRules()\n})\n</script>\n\n<style scoped>\n/* Card Footer Styling */\n.card-footer {\n  background-color: #f8f9fa !important;\n  border-top: 1px solid #dee2e6 !important;\n}\n\n[data-bs-theme=\"dark\"] .card-footer {\n  background-color: #2d3748 !important;\n  border-top-color: #4a5568 !important;\n}\n\n/* Table Styling */\n.table thead th {\n  background-color: #343a40 !important;\n  border-color: #454d55 !important;\n  color: white !important;\n}\n\n[data-bs-theme=\"dark\"] .table thead th {\n  background-color: #212529 !important;\n  border-color: #495057 !important;\n}\n\n.table tbody tr {\n  background-color: #ffffff !important;\n}\n\n[data-bs-theme=\"dark\"] .table tbody tr {\n  background-color: #1a202c !important;\n}\n\n.table tbody tr:nth-of-type(odd) {\n  background-color: #f8f9fa !important;\n}\n\n[data-bs-theme=\"dark\"] .table tbody tr:nth-of-type(odd) {\n  background-color: #2d3748 !important;\n}\n\n.table tbody tr:hover {\n  background-color: #e9ecef !important;\n}\n\n[data-bs-theme=\"dark\"] .table tbody tr:hover {\n  background-color: #4a5568 !important;\n}\n\n/* Card Styling */\n.card {\n  background-color: #ffffff !important;\n  border: 1px solid #dee2e6 !important;\n}\n\n[data-bs-theme=\"dark\"] .card {\n  background-color: #1a202c !important;\n  border-color: #4a5568 !important;\n}\n\n.card-header {\n  background-color: #f8f9fa !important;\n  border-bottom: 1px solid #dee2e6 !important;\n}\n\n[data-bs-theme=\"dark\"] .card-header {\n  background-color: #2d3748 !important;\n  border-bottom-color: #4a5568 !important;\n}\n\n/* Drag & Drop Styling */\n.draggable-row {\n  cursor: move;\n  transition: all 0.2s ease;\n}\n\n.draggable-row:hover {\n  background-color: #f8f9fa;\n}\n\n[data-bs-theme=\"dark\"] .draggable-row:hover {\n  background-color: #2d3748;\n}\n\n.draggable-row.drag-over {\n  border-top: 2px solid #0d6efd;\n  background-color: #e3f2fd;\n}\n\n[data-bs-theme=\"dark\"] .draggable-row.drag-over {\n  border-top: 2px solid #0d6efd;\n  background-color: #1e3a8a;\n}\n\n.drag-handle {\n  cursor: grab;\n  user-select: none;\n}\n\n.drag-handle:active {\n  cursor: grabbing;\n}\n\n.cursor-grab {\n  cursor: grab;\n}\n\n.cursor-grab:active {\n  cursor: grabbing;\n}\n\n/* Success Button Styling */\n.btn-success {\n  background-color: #198754;\n  border-color: #198754;\n}\n\n.btn-success:hover {\n  background-color: #157347;\n  border-color: #146c43;\n}\n\n.btn-success:disabled {\n  background-color: #6c757d;\n  border-color: #6c757d;\n  opacity: 0.65;\n}\n\n[data-bs-theme=\"dark\"] .text-muted {\n  color: #adb5bd !important;\n}\n\n/* Command Preview Styling */\n.bg-dark {\n  background-color: #212529 !important;\n}\n\n[data-bs-theme=\"dark\"] .bg-dark {\n  background-color: #1a202c !important;\n}\n\ncode {\n  font-family: 'Courier New', monospace;\n  font-size: 0.9em;\n  color: #f8f9fa !important;\n}\n\n.form-text {\n  font-size: 0.875em;\n  color: #6c757d;\n}\n\n[data-bs-theme=\"dark\"] .form-text {\n  color: #a0aec0;\n}\n\n.text-danger {\n  color: #dc3545 !important;\n}\n</style>\n"],"names":["natRules","ref","originalNatRules","loading","savingOrder","hasUnsavedChanges","draggedIndex","dragOverIndex","newNatRule","isFormValid","computed","rule","generateIptablesCommand","cmd","loadNatRules","data","error","addNatRule","showToast","closeAddNatRuleModal","resetNewNatRuleForm","deleteNatRule","ruleId","reloadNatRules","onTargetChange","openAddNatRuleModal","modal","handleDragStart","index","event","handleDragOver","handleDrop","dropIndex","draggedRule","handleDragEnd","saveNatRuleOrder","rulesData","response","res","type","message","toast","onMounted"],"mappings":"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"}